{"version":3,"sources":["webpack:///./src/components/timelineItem.js","webpack:///./src/components/timeline.js","webpack:///./src/pages/timeline.js"],"names":["props","className","timelineItem","container","itemData","data","frontmatter","path","externalLink","interactive","odd","itemClasses","id","title","replace","date","dateFormatter","icon","line","href","onClick","openURL","thumbnail","src","alt","renderItem","Group","year","timeline","renderTimeline","timelineItems","groupedTimeline","sort","a","b","node","localeCompare","reduce","groups","item","index","substring","getYear","push","isOdd","content","groupTimelineByYear","Object","keys","map","group","Fragment","key","i","renderTimelineGroup","allMarkdownRemark","edges","query"],"mappings":"sOAsBe,WAACA,GACd,IAAIC,EAAeC,IAAaC,UAAnB,IAAgCH,EAAMC,UAC7CG,EAAWJ,EAAMK,KAAKC,YAO5B,OANIF,EAASG,MAAQH,EAASI,gBAC5BP,EAAeA,EAAN,IAAmBC,IAAaO,aAEvCT,EAAMU,MACRT,EAAeA,EAAN,IAAmBC,IAAaQ,KAzB1B,SAACN,EAAUO,GAAX,OACjB,yBAAKV,UAAWU,EAAaC,GAAIR,EAASS,MAAMC,QAAQ,YAAa,KAAKA,QAAQ,QAAS,KACzF,yBAAKb,UAAWC,IAAaa,MAAOC,YAAcZ,EAASW,OAC3D,yBAAKd,UAAWC,IAAae,MAAM,uBAAGhB,UAAWG,EAASa,MAAQ,iBAClE,yBAAKhB,UAAWC,IAAagB,OAC7B,uBAAGC,KAAM,IAAMf,EAASS,MAAMC,QAAQ,YAAa,KAAKA,QAAQ,QAAS,MACzE,yBAAKb,UAAWC,IAAaW,MAC3BO,QAAS,kBAAMC,YAASjB,EAASG,KAAOH,EAASG,KAAOH,EAASI,cAAeJ,EAASG,QACxFH,EAASS,OAEZ,6BACGT,EAASkB,UACR,yBAAKrB,UAAWC,IAAaoB,UAAWC,IAAKnB,EAASkB,UAAWE,IAAI,KACnE,KAcDC,CAAWrB,EAAUH,I,qBC1BxByB,EAAQ,SAAC1B,GAAD,OACZ,yBAAKY,GAAIZ,EAAM2B,KAAM1B,UAAW2B,IAASD,MACvC,uBAAGR,KAAM,IAAMnB,EAAM2B,MAAO3B,EAAM2B,QA4BhCE,EAAiB,SAAAC,GACrB,IAAMC,EAvBoB,SAACD,GAC3B,OAAOA,EACJE,MAAK,SAACC,EAAGC,GAAJ,OAAUA,EAAEC,KAAK7B,YAAYS,KAAKqB,cAAcH,EAAEE,KAAK7B,YAAYS,SACxEsB,QAAO,SAACC,EAAQC,EAAMC,GACrB,IAAMb,EANI,SAAAzB,GAAY,OAAIA,EAAaa,KAAK0B,UAAU,EAAG,GAM5CC,CAAQH,EAAKJ,KAAK7B,aAQ/B,YAP4B,IAAjBgC,EAAOX,KAChBW,EAAOX,GAAQ,IAEjBW,EAAOX,GAAMgB,KAAK,CAChBC,MAAQJ,EAAQ,GAAO,EACvBK,QAASN,IAEJD,IACN,IAUmBQ,CAAoBhB,GAG5C,OAFeiB,OAAOC,KAAKjB,GACxBC,MAAK,SAACC,EAAGC,GAAJ,OAAUA,EAAEE,cAAcH,MACpBgB,KAAI,SAACC,EAAOV,GAAR,OAChB,kBAAC,IAAMW,SAAP,CAAgBC,IAAKZ,GACnB,kBAAC,EAAD,CAAOb,KAAMuB,IAZS,SAACpB,GAAD,OAC1BA,EAAcmB,KAAI,SAACV,EAAMc,GAAP,OAChB,kBAAC,EAAD,CAAchD,KAAMkC,EAAKM,QAAQV,KAAMiB,IAAKC,EAAG3C,IAAK6B,EAAKK,WAWtDU,CAAoBvB,EAAgBmB,SAK5B,WAAClD,GAAD,OACb,yBAAKC,UAAW2B,IAASzB,WACtB0B,EAAe7B,EAAMK,QChD1B,sCAIe,0BAAGA,EAAH,EAAGA,KAAH,OACb,6BACE,kBAAC,IAAD,MACA,yBAAKJ,UAAU,WACb,uCAEE,uBAAGkB,KAAK,yBAAyBlB,UAAU,wBAAwBY,MAAM,sBACvE,uBAAGZ,UAAU,yBAGjB,kBAAC,EAAD,CAAUI,KAAMA,EAAKkD,kBAAkBC,WAV9B,IAeFC,EAAK","file":"component---src-pages-timeline-js-31025d4770766ec18245.js","sourcesContent":["import React from \"react\";\nimport { dateFormatter, openURL } from \"../utils/common.util\";\nimport timelineItem from \"./timelineItem.module.css\";\n\nconst renderItem = (itemData, itemClasses) => (\n  <div className={itemClasses} id={itemData.title.replace(/[. ,:-]+/g, \"-\").replace(/[\"]+/g, \"\")}>\n    <div className={timelineItem.date}>{dateFormatter(itemData.date)}</div>\n    <div className={timelineItem.icon}><i className={itemData.icon || \"fas fa-bell\"}></i></div>\n    <div className={timelineItem.line}></div>\n    <a href={\"#\" + itemData.title.replace(/[. ,:-]+/g, \"-\").replace(/[\"]+/g, \"\")}></a>\n    <div className={timelineItem.title}\n      onClick={() => openURL((itemData.path ? itemData.path : itemData.externalLink), itemData.path ? false : true)}>\n      {itemData.title}\n    </div>\n    <div>\n      {itemData.thumbnail ? (\n        <img className={timelineItem.thumbnail} src={itemData.thumbnail} alt=\"\" />\n      ) : \"\"}\n    </div>\n  </div>\n)\n\nexport default (props) => {\n  let className = `${timelineItem.container} ${props.className}`;\n  const itemData = props.data.frontmatter;\n  if (itemData.path || itemData.externalLink) {\n    className = `${className} ${timelineItem.interactive}`;\n  }\n  if (props.odd) {\n    className = `${className} ${timelineItem.odd}`;\n  }\n  return renderItem(itemData, className);\n}\n","import React from \"react\";\nimport TimelineItem from \"../components/timelineItem\";\nimport timeline from \"./timeline.module.css\";\n\n\nconst Group = (props) => (\n  <div id={props.year} className={timeline.year}>\n    <a href={\"#\" + props.year}>{props.year}</a>\n  </div >\n);\n\nconst getYear = timelineItem => timelineItem.date.substring(0, 4);\n\nconst groupTimelineByYear = (timelineItems) => {\n  return timelineItems\n    .sort((a, b) => b.node.frontmatter.date.localeCompare(a.node.frontmatter.date))\n    .reduce((groups, item, index) => {\n      const year = getYear(item.node.frontmatter);\n      if (typeof groups[year] === 'undefined') {\n        groups[year] = [];\n      }\n      groups[year].push({\n        isOdd: (index % 2) === 1,\n        content: item\n      });\n      return groups;\n    }, {});\n}\n\nconst renderTimelineGroup = (timelineItems) => (\n  timelineItems.map((item, i) => (\n    <TimelineItem data={item.content.node} key={i} odd={item.isOdd}></TimelineItem>\n  ))\n);\n\nconst renderTimeline = timelineItems => {\n  const groupedTimeline = groupTimelineByYear(timelineItems);\n  const groups = Object.keys(groupedTimeline)\n    .sort((a, b) => b.localeCompare(a));\n  return groups.map((group, index) => (\n    <React.Fragment key={index}>\n      <Group year={group} />\n      {renderTimelineGroup(groupedTimeline[group])}\n    </React.Fragment>\n  ))\n}\n\nexport default (props) => (\n  <div className={timeline.container}>\n    {renderTimeline(props.data)}\n  </div>\n);","import { graphql } from \"gatsby\";\nimport React from \"react\";\nimport Header from \"../components/header\";\nimport Timeline from \"../components/timeline\";\n\nexport default ({ data }) => (\n  <div>\n    <Header />\n    <div className=\"content\">\n      <h2>\n        Timeline\n        <a href=\"/log/how-to-contribute\" className=\"timeline-contrib-info\" title=\"How to contribute?\">\n          <i className=\"fas fa-info-circle\"></i>\n        </a>\n      </h2>\n      <Timeline data={data.allMarkdownRemark.edges}></Timeline>\n    </div>\n  </div>\n)\n\nexport const query = graphql`\n  query {\n    allMarkdownRemark(\n      filter: {\n        fileAbsolutePath: {\n          regex: \"/\\/timeline/\"\n        }\n      },\n    ) {\n      edges {\n        node {\n          frontmatter {\n            title\n            date\n            path\n            icon\n            thumbnail\n            thumbnailSource\n            externalLink\n          }\n        }\n      }\n    }\n  }\n`"],"sourceRoot":""}