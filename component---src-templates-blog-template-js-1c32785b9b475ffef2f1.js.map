{"version":3,"sources":["webpack:///./src/templates/blogTemplate.module.css","webpack:///./src/components/superheroButton.js","webpack:///./src/templates/blogTemplate.js"],"names":["module","exports","handleLoad","window","superheroUtils","createButton","size","account","script","src","onChangeClientState","newState","addedTags","scriptTags","onload","Template","markdownRemark","data","frontmatter","html","className","blogTemplateModule","post","title","date","dateFormatter","publishedOn","author","content","dangerouslySetInnerHTML","__html","pageQuery"],"mappings":"8EACAA,EAAOC,QAAU,CAAC,KAAO,mCAAmC,MAAQ,oCAAoC,KAAO,mCAAmC,OAAS,qCAAqC,QAAU,wC,kCCD1M,qCAGe,eACX,IAAMC,EAAa,WACfC,OAAOC,eAAeC,aAAa,kBAAmB,CAAEC,KAAM,OAAQC,QAAS,uBAC/EJ,OAAOC,eAAeC,aAAa,mBAAoB,CAAEC,KAAM,QAASC,QAAS,uBACjFJ,OAAOC,eAAeC,aAAa,oBAAqB,CAAEC,KAAM,SAAUC,QAAS,uBACnFJ,OAAOC,eAAeC,aAAa,mBAAoB,CAAEC,KAAM,QAASC,QAAS,wBAQrF,OAAO,oCACH,kBAAC,IAAD,CACIC,OAAQ,CAAC,CAAEC,IAAK,qEAChBC,oBATwB,SAACC,EAAUC,GACnCA,GAAaA,EAAUC,aACLD,EAAUC,WAAW,GAC7BC,OAASZ,S,kCCZ/B,2KAMe,SAASa,EAAT,GAEX,IACMC,EADP,EADDC,KAEQD,eACAE,EAAsBF,EAAtBE,YAAaC,EAASH,EAATG,KACrB,OACE,6BACE,kBAAC,IAAD,MACA,kBAAC,IAAD,MACA,yBAAKC,UAAU,WACb,yBAAKA,UAAWC,IAAmBC,MACjC,wBAAIF,UAAWC,IAAmBE,OAAQL,EAAYM,KAAOC,YAAcP,EAAYM,MAAQ,MAAQ,GAAIN,EAAYK,OACvH,yBAAKH,UAAWC,IAAmBG,MAAnC,cAAqDC,YAAcP,EAAYQ,cAC/E,yBAAKN,UAAWC,IAAmBM,QAAnC,WAAoDT,EAAYS,QAChE,yBACEP,UAAWC,IAAmBO,QAC9BC,wBAAyB,CAAEC,OAAQX,QAQxC,IAAMY,EAAS","file":"component---src-templates-blog-template-js-1c32785b9b475ffef2f1.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"post\":\"blogTemplate-module--post--YTpWw\",\"title\":\"blogTemplate-module--title--3S--G\",\"date\":\"blogTemplate-module--date--wlawP\",\"author\":\"blogTemplate-module--author--siqfe\",\"content\":\"blogTemplate-module--content--2Dyrg\"};","import React from 'react';\nimport Helmet from 'react-helmet';\n\nexport default () => {\n    const handleLoad = () => {\n        window.superheroUtils.createButton('.superhero-icon', { size: 'icon', account: 'kryptokrauts.chain' });\n        window.superheroUtils.createButton('.superhero-small', { size: 'small', account: 'kryptokrauts.chain' });\n        window.superheroUtils.createButton('.superhero-medium', { size: 'medium', account: 'kryptokrauts.chain' });\n        window.superheroUtils.createButton('.superhero-large', { size: 'large', account: 'kryptokrauts.chain' });\n    }\n    const handleChangeClientState = (newState, addedTags) => {\n        if (addedTags && addedTags.scriptTags) {\n            const scriptTag = addedTags.scriptTags[0];\n            scriptTag.onload = handleLoad;\n        }\n    }\n    return <>\n        <Helmet\n            script={[{ src: 'https://unpkg.com/@aeternity/superhero-utils@0.5.1/dist/index.js' }]}\n            onChangeClientState={handleChangeClientState}\n        />\n    </>\n}","import { graphql } from \"gatsby\";\nimport React from \"react\";\nimport Header from \"../components/header\";\nimport SuperheroButton from \"../components/superheroButton\";\nimport { dateFormatter } from \"../utils/common.util\";\nimport blogTemplateModule from \"./blogTemplate.module.css\";\n\nexport default function Template({\n  data, // this prop will be injected by the GraphQL query below.\n}) {\n  const { markdownRemark } = data // data.markdownRemark holds our post data\n  const { frontmatter, html } = markdownRemark\n  return (\n    <div>\n      <Header />\n      <SuperheroButton />\n      <div className=\"content\">\n        <div className={blogTemplateModule.post}>\n          <h1 className={blogTemplateModule.title}>{frontmatter.date ? dateFormatter(frontmatter.date) + \" - \" : \"\"}{frontmatter.title}</h1>\n          <div className={blogTemplateModule.date}>published: {dateFormatter(frontmatter.publishedOn)}</div>\n          <div className={blogTemplateModule.author}>Author: {frontmatter.author}</div>\n          <div\n            className={blogTemplateModule.content}\n            dangerouslySetInnerHTML={{ __html: html }}\n          />\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport const pageQuery = graphql`\n  query($path: String!) {\n    markdownRemark(frontmatter: {path: {eq: $path } }) {\n      html\n      frontmatter {\n        publishedOn\n        date\n        title\n        author\n      }\n    }\n  }\n`"],"sourceRoot":""}